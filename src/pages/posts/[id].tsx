import type { NextPage, GetStaticProps, GetStaticPaths } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import styles from '@/styles/Home.module.css';
import { fetcher } from '@/lib/fetcher';
import { ParsedUrlQuery } from 'querystring';

type Props = {
  fallbackData: TestApiResponseType;
};

type Params = ParsedUrlQuery & {
  id: string;
};

const Post: NextPage<Props> = ({ fallbackData }) => {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>{fallbackData.id}</h1>
        <p>{fallbackData.content}</p>
      </main>

      <footer className={styles.footer}>
        <a
          href='https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app'
          target='_blank'
          rel='noopener noreferrer'
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src='/vercel.svg' alt='Vercel Logo' width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

export const getStaticProps: GetStaticProps = async (context) => {
  const API_URL = process.env.API_URL_ROOT;
  if (typeof API_URL === 'undefined') {
    return {
      props: {
        fallbackData: undefined,
      },
    };
  }

  const data = (await fetcher(API_URL)).find(
    ({ id }) => id === context.params?.id
  );
  return {
    props: {
      fallbackData: data,
    },
  };
};

export const getStaticPaths: GetStaticPaths<Params> = async () => {
  const paths = (await fetcher(process.env.API_URL_ROOT as string)).map(
    ({ id }) => {
      return {
        params: {
          id,
        },
      };
    }
  );

  return {
    paths,
    fallback: false,
  };
};

export default Post;
